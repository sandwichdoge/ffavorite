/*
 * Generated by gdbus-codegen 2.50.3. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __TFMAND_H__
#define __TFMAND_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.tfman */

#define TERMINAL_FILE_MANAGER_TYPE_ (terminal_file_manager__get_type ())
#define TERMINAL_FILE_MANAGER_(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TERMINAL_FILE_MANAGER_TYPE_, TerminalFileManager))
#define TERMINAL_FILE_MANAGER_IS_(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TERMINAL_FILE_MANAGER_TYPE_))
#define TERMINAL_FILE_MANAGER__GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TERMINAL_FILE_MANAGER_TYPE_, TerminalFileManagerIface))

struct _TerminalFileManager;
typedef struct _TerminalFileManager TerminalFileManager;
typedef struct _TerminalFileManagerIface TerminalFileManagerIface;

struct _TerminalFileManagerIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_add) (
    TerminalFileManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_filename);

  gboolean (*handle_list) (
    TerminalFileManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_rm) (
    TerminalFileManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_filename);

  void (*mysignal) (
    TerminalFileManager *object,
    gint arg_ret);

};

GType terminal_file_manager__get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *terminal_file_manager__interface_info (void);
guint terminal_file_manager__override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void terminal_file_manager__complete_list (
    TerminalFileManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *files);

void terminal_file_manager__complete_add (
    TerminalFileManager *object,
    GDBusMethodInvocation *invocation);

void terminal_file_manager__complete_rm (
    TerminalFileManager *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void terminal_file_manager__emit_mysignal (
    TerminalFileManager *object,
    gint arg_ret);



/* D-Bus method calls: */
void terminal_file_manager__call_list (
    TerminalFileManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean terminal_file_manager__call_list_finish (
    TerminalFileManager *proxy,
    gchar **out_files,
    GAsyncResult *res,
    GError **error);

gboolean terminal_file_manager__call_list_sync (
    TerminalFileManager *proxy,
    gchar **out_files,
    GCancellable *cancellable,
    GError **error);

void terminal_file_manager__call_add (
    TerminalFileManager *proxy,
    const gchar *arg_filename,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean terminal_file_manager__call_add_finish (
    TerminalFileManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean terminal_file_manager__call_add_sync (
    TerminalFileManager *proxy,
    const gchar *arg_filename,
    GCancellable *cancellable,
    GError **error);

void terminal_file_manager__call_rm (
    TerminalFileManager *proxy,
    const gchar *arg_filename,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean terminal_file_manager__call_rm_finish (
    TerminalFileManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean terminal_file_manager__call_rm_sync (
    TerminalFileManager *proxy,
    const gchar *arg_filename,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TERMINAL_FILE_MANAGER_TYPE__PROXY (terminal_file_manager__proxy_get_type ())
#define TERMINAL_FILE_MANAGER__PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TERMINAL_FILE_MANAGER_TYPE__PROXY, TerminalFileManagerProxy))
#define TERMINAL_FILE_MANAGER__PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TERMINAL_FILE_MANAGER_TYPE__PROXY, TerminalFileManagerProxyClass))
#define TERMINAL_FILE_MANAGER__PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TERMINAL_FILE_MANAGER_TYPE__PROXY, TerminalFileManagerProxyClass))
#define TERMINAL_FILE_MANAGER_IS__PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TERMINAL_FILE_MANAGER_TYPE__PROXY))
#define TERMINAL_FILE_MANAGER_IS__PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TERMINAL_FILE_MANAGER_TYPE__PROXY))

typedef struct _TerminalFileManagerProxy TerminalFileManagerProxy;
typedef struct _TerminalFileManagerProxyClass TerminalFileManagerProxyClass;
typedef struct _TerminalFileManagerProxyPrivate TerminalFileManagerProxyPrivate;

struct _TerminalFileManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  TerminalFileManagerProxyPrivate *priv;
};

struct _TerminalFileManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType terminal_file_manager__proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (TerminalFileManagerProxy, g_object_unref)
#endif

void terminal_file_manager__proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
TerminalFileManager *terminal_file_manager__proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
TerminalFileManager *terminal_file_manager__proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void terminal_file_manager__proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
TerminalFileManager *terminal_file_manager__proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
TerminalFileManager *terminal_file_manager__proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TERMINAL_FILE_MANAGER_TYPE__SKELETON (terminal_file_manager__skeleton_get_type ())
#define TERMINAL_FILE_MANAGER__SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TERMINAL_FILE_MANAGER_TYPE__SKELETON, TerminalFileManagerSkeleton))
#define TERMINAL_FILE_MANAGER__SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TERMINAL_FILE_MANAGER_TYPE__SKELETON, TerminalFileManagerSkeletonClass))
#define TERMINAL_FILE_MANAGER__SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TERMINAL_FILE_MANAGER_TYPE__SKELETON, TerminalFileManagerSkeletonClass))
#define TERMINAL_FILE_MANAGER_IS__SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TERMINAL_FILE_MANAGER_TYPE__SKELETON))
#define TERMINAL_FILE_MANAGER_IS__SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TERMINAL_FILE_MANAGER_TYPE__SKELETON))

typedef struct _TerminalFileManagerSkeleton TerminalFileManagerSkeleton;
typedef struct _TerminalFileManagerSkeletonClass TerminalFileManagerSkeletonClass;
typedef struct _TerminalFileManagerSkeletonPrivate TerminalFileManagerSkeletonPrivate;

struct _TerminalFileManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  TerminalFileManagerSkeletonPrivate *priv;
};

struct _TerminalFileManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType terminal_file_manager__skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (TerminalFileManagerSkeleton, g_object_unref)
#endif

TerminalFileManager *terminal_file_manager__skeleton_new (void);


G_END_DECLS

#endif /* __TFMAND_H__ */
